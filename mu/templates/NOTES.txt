   
 Congratulations!

______                          _____  __
___  / ___________ _______      __  / / /
__  /  _  _ \  __ `/_  __ \     _  / / / 
_  /___/  __/ /_/ /_  / / /     / /_/ /  
/_____/\___/\__,_/ /_/ /_/     / ____/   
                              /_/
                                                                 
        Lean Mu is now provisioned...

Please give the cluster a few minutes to initialize...

To verify deployment status, run:
 $ kubectl -n {{ .Release.Namespace }} get deployments

The Mu platform can be accessed at the following ingress url {{ template "mu.public.ui.url" . }}

The above assumes the hostname {{ .Values.ingress.ui.hostname }} points to the ingres IP.
If you need to discover the ingres IP to update the DNS, run the following command:
 - kubectl get ingress mu-ingress-controller -n {{ .Release.Namespace }} -o jsonpath="{.status.loadBalancer.ingress[0].ip}"

When properly configured, the following URLs are available

{{- if .Values.ingress.ui.hostname }}
           UI endpoint - {{ template "mu.public.ui.url" . }}
{{- end }}
          API endpoint - {{ template "mu.public.api.url" . }}
Fn invocation endpoint - {{ template "mu.public.fn.url" . }}
{{- if .Values.ingress.flow.hostname }}
         FLOW endpoint - {{ template "mu.public.flow.url" . }}
{{- end }}
{{- if .Values.ingress.grafana.hostname }}
   Monitoring endpoint - {{ template "mu.public.grafana.url" . }}
{{- end }}
    Incluster endpoint - {{ template "mu.private_api_url" . }}

= TESTING THE CONFIGURATION ======

First, we will install Fn CLI

 $ brew install fn

Next, we will setup a context to access the new mu instance:

    optional - assuming the mu context already exists
[ $ fn use ctx default
      fn delete ctx mu ]
 $ fn create ctx {{ template "release" . }} --api-url {{ template "mu.public.api.url" . }} --provider default --registry <your-docker-registry>
 $ fn use ctx {{ template "release" . }}

Run a quick test to check platform connectivity
   Ensure the Server version is properly displaying a number

 $ fn version
Client version is latest version: 0.6.7
Server version:  0.3.749

We will now create a simple application by issuing the following commands:

 $ fn create app first-app
 $ fn list apps

Last, create and call a function. Please ensure you have a local docker deamon running, it is used to build the fn image before it gets deployed:

 $ fn init --runtime go --trigger http first-fn
 $ cd first-fn
 $ fn --verbose deploy --app first-app
 $ echo -n '{"name":"John"}' |Â fn invoke first-app first-fn

Invoking with CURL

 $ fn inspect fn first-app first-fn

Grab the INVOCATION_URL endpoint from the output

$ curl -X "POST" -H "Content-Type: application/json" -d '{"name":"Bob"}' INVOCATION_URL


= TROUBLESHOOTING ======

See all pods
 $ kubectl -n {{ .Release.Namespace }} get pods

Gets details about the deployment of the pod
 $ kubectl -n {{ .Release.Namespace }} get pod <POD_NAME>

Gets logs from your application
 $ kubectl -n {{ .Release.Namespace }} logs <POD_NAME>

= ENTERPRISE =====

If you are serious about Mu, please consider enterprise support


{{- if not  .Values.mysql.persistence.enabled }}

############################################################################
###   WARNING: Persistence is disabled!!! You will lose function and     ###
###   flow state when the MySQL pod is terminated.                       ###
###   See the README.md for instructions on configuring persistence.     ###
############################################################################
{{- end }}
